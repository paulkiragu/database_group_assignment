
### 1. Entity Relationship Description

- **Book**: Contains details about each book such as title, publication year, language, and ISBN.
- **Author**: Stores personal details of each author.
- **Book_Author**: A junction table to represent the many-to-many relationship between books and authors.
- **Book_Language**: Contains the list of available languages in which books are written.

---

### 2. Tables and Relationships

#### Table: `book_language`
Stores information about book languages.

```sql
CREATE TABLE book_language (
    language_id INT AUTO_INCREMENT PRIMARY KEY,
    language_name VARCHAR(50) NOT NULL UNIQUE
);
```

#### Table: `author`
Holds data about authors.

```sql
CREATE TABLE author (
    author_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    birth_date DATE
);
```

#### Table: `book`
Contains book-specific details and links to a language.

```sql
CREATE TABLE book (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    publication_year YEAR,
    language_id INT,
    isbn VARCHAR(20) UNIQUE,
    FOREIGN KEY (language_id) REFERENCES book_language(language_id)
);
```

#### Table: `book_author`
Manages the many-to-many relationship between books and authors.

```sql
CREATE TABLE book_author (
    book_id INT,
    author_id INT,
    PRIMARY KEY (book_id, author_id),
    FOREIGN KEY (book_id) REFERENCES book(book_id) ON DELETE CASCADE,
    FOREIGN KEY (author_id) REFERENCES author(author_id) ON DELETE CASCADE
);
```

---

### 3. Relationships Summary

- One **language** → many **books**
- One **book** → many **authors**
- One **author** → many **books**

This is managed through the `book_author` table acting as a bridge between `book` and `author`.

---

### 4. Implementation of Relationships and Data Types

#### Book Table
```sql
CREATE TABLE book (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    publication_year YEAR,
    language_id INT,
    isbn VARCHAR(20) UNIQUE,
    FOREIGN KEY (language_id) REFERENCES book_language(language_id)
);
```
- `INT AUTO_INCREMENT`: Used for `book_id` for unique identification.
- `VARCHAR(255)`: Accommodates varying book title lengths.
- `YEAR`: Stores only the year of publication.
- `VARCHAR(20)`: Sufficient for storing ISBN codes (usually 10-13 characters).
- `INT`: Foreign key reference to language table.

#### Author Table
```sql
CREATE TABLE author (
    author_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    birth_date DATE
);
```
- `VARCHAR(50)`: For names to allow flexibility.
- `DATE`: Used for `birth_date`.
- `INT AUTO_INCREMENT`: For unique author IDs.

#### Book_Language Table
```sql
CREATE TABLE book_language (
    language_id INT AUTO_INCREMENT PRIMARY KEY,
    language_name VARCHAR(50) NOT NULL UNIQUE
);
```
- `VARCHAR(50)`: Enough for common language names.
- `UNIQUE`: Prevents duplication of language entries.
- `INT AUTO_INCREMENT`: For unique language IDs.

#### Book_Author Table (Junction Table)
```sql
CREATE TABLE book_author (
    book_id INT,
    author_id INT,
    PRIMARY KEY (book_id, author_id),
    FOREIGN KEY (book_id) REFERENCES book(book_id) ON DELETE CASCADE,
    FOREIGN KEY (author_id) REFERENCES author(author_id) ON DELETE CASCADE
);
```
- `INT`: References from `book` and `author`.
- Composite Primary Key: Prevents duplicate book-author pairs.

---

### Conclusion
This schema is normalized to 3rd Normal Form (3NF), ensuring no data redundancy and efficient queries. It is scalable to support additional features like book categories, publisher info, or user reviews.

